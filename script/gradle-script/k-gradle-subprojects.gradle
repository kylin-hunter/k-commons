ext {
    changeActiveProfile = { profile ->
        println("@@ change active profile ==> " + "$buildDir/resources/main/application.yml")
        File applicaitonFile = new File("$buildDir/resources/main/application.yml")
        if (applicaitonFile.exists()&&applicaitonFile.getAbsolutePath().indexOf("server")>0) {
            def list = []
            println("@@ change active profile ==> " + profile)
            applicaitonFile.withReader('UTF-8') { reader ->
                reader.eachLine {
                    if (it.startsWith('    active:')) {
                        it = "    active: $profile"
                        println("@@ change spring.profiles.active success ==> " + profile)
                    }
                    if (it.startsWith('  devVersion:')) {
                        it = "  devVersion: $version"
                        println("@@ change app.devVersion success ==> " + version)
                    }
                    list.add(it)
                }
                applicaitonFile.withWriter('UTF-8') { writer ->
                    list.each {
                        writer.writeLine(it)
                    }
                }
            }
        }

        File bootstrapFile = new File("$buildDir/resources/main/bootstrap.yml")
        if (bootstrapFile.exists()&&bootstrapFile.getAbsolutePath().indexOf("server")>0) {
            def list = []
            println("@@ change spring.cloud.nacos.config.config ==> " + profile)
            bootstrapFile.withReader('UTF-8') { reader ->
                reader.eachLine {
                    if (it.startsWith('        namespace:')) {
                        it = "        namespace: $profile"
                        println("@@ change spring.cloud.nacos.config.config success ==> " + profile)
                    }
                    list.add(it)
                }
                bootstrapFile.withWriter('UTF-8') { writer ->
                    list.each {
                        writer.writeLine(it)
                    }
                }
            }
        }

    }


    addDockerBuildTask = { projectName ->

        rootProject.config_modules_build_images.each {

            if (it == projectName) {
//                println it

// Use task types dependsOn: build
                task dockerImagePrepare(dependsOn: build) {

                    ext {

                        sourceFile= file("$rootProject.buildDir/docker-${project.name}/${project.name}-${project.version}.jar")
                        distFile  = file("$rootProject.buildDir/docker-${project.name}/${project.name}.jar")
                    }
                    doLast {

                        copy {
                            from distFile
                            into "$rootProject.buildDir/docker-" + project.name
                        }
                        copy {
                            from 'src/main/resources/docker'
                            into "$rootProject.buildDir/docker-" + project.name
                            include 'Dockerfile'
                            include '/bin/*.sh'
                        }
                        copy {
                            from 'output/libs'
                            into "$rootProject.buildDir/docker-" + project.name
                            include '**/*.jar'


                        }
                        copy {
                            from configurations.compile
                            into "$rootProject.buildDir/docker-" + project.name + "/lib"
                        }

                        sourceFile.renameTo(distFile)



                    }


                }
// Use task types
                task dockerImageBuild(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: dockerImagePrepare) {
                    inputDir = file("$rootProject.buildDir/docker-" + project.name)
                    images.add(IMAGE_REPO + project.name + ":" + rootProject.IMAGE_VERSION)
                }
            }
        }


    }

}

task taskReadSecretProperties {

    def localProperties = new Properties()
    def dis = null

    try {
        def localFile = rootProject.file('/Users/bijian/gradle-secret.properties')
        if (localFile.exists()) {
            dis = localFile.newDataInputStream();
            localProperties.load(dis)
        }
    } catch (Exception ignored) {
        println ignored
    } finally {
        if (dis != null) {
            dis.close()
        }
    }

    sonatypeUsername = localProperties.getProperty("sonatypeUsername")
    sonatypePassword = localProperties.getProperty("sonatypePassword")

    println sonatypeUsername
    println sonatypePassword

}


