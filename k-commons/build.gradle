dependencies {

    api(rootProject.dependency_management['reflections'])
    api(rootProject.dependency_management['commons-io'])
    api(rootProject.dependency_management['commons-lang3'])
    api(rootProject.dependency_management['guava'])
    implementation("ch.qos.logback:logback-classic")


    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'

    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")


    implementation(rootProject.dependency_management['dom4j']) {
        exclude module: "pull-parser"
    }
    implementation('org.yaml:snakeyaml')


//    testImplementation files(Jvm.current().toolsJar)


}

jar.enabled = true
bootJar.enabled(false)
bootJarMainClassName.enabled(false)

jar {
    exclude("logback.xml")
    exclude("k-jul-logging.properties")
}
test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')

    println jvmArgs
    jacoco {
        includes = []
        excludes = []
    }
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "io/github/kylinhunter/commons/**/exception/embed/**",
                    "io/github/kylinhunter/commons/**/exception/common/**",
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['io.github.kylinhunter.*']
            excludes = ['io.github.kylinhunter.commons.exception.embed.*',
                        'io.github.kylinhunter.commons.exception.common.*']
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.5
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.3
            }
        }
    }
}



