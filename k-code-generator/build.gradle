dependencies {
    api project(":k-utils")
    api project(":k-jdbc")
    implementation(rootProject.dependency_management['logback-classic'])
    api(rootProject.dependency_management['velocity-engine-core'])
    api(rootProject.dependency_management['velocity-tools-generic'])
    api(rootProject.dependency_management['springfox-swagger2'])


    implementation(rootProject.dependency_management['velocity-engine-core'])
    implementation(rootProject.dependency_management['velocity-tools-generic'])

    implementation(rootProject.dependency_management['mysql-connector-java'])
    implementation(rootProject.dependency_management['ojdbc8'])
    implementation(rootProject.dependency_management['commons-dbutils'])
    implementation(rootProject.dependency_management['aviator'])

//    testImplementation files(Jvm.current().toolsJar)


}


jar.enabled = true
//bootJar.enabled(false)


jar {
    exclude("logback.xml")

}
sourceSets {
    main {
        java.srcDirs += ['src_generator']
    }
}
test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    println jvmArgs
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "io/github/kylinhunter/commons/generator/exception/**",
                    "io/github/kylinhunter/commons/generator/*/exception/**",
                    "com/kylinhunter/**"


            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['io.github.kylinhunter.*']
            excludes = ['io.github.kylinhunter.commons.generator.exception.*',
                        'io.github.kylinhunter.commons.generator.*.exception.*']
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.5
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.3
            }
        }
    }
}





