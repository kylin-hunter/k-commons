dependencies {
    implementation project(":k-jdbc")
    implementation("ch.qos.logback:logback-classic")
    implementation("org.codehaus.janino:janino")

    implementation("org.apache.velocity:velocity-engine-core")
    implementation("org.apache.velocity.tools:velocity-tools-generic")
    implementation("io.springfox:springfox-swagger2")

    // jdbc
    implementation("mysql:mysql-connector-java")
    implementation("com.oracle.database.jdbc:ojdbc8")
    implementation fileTree(dir: 'lib', includes: ['*.jar'])
    implementation("com.googlecode.aviator:aviator")


}


jar {
    exclude("logback.xml")

}
sourceSets {
    main {
        java.srcDirs += ['src_generator']
    }
}
test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
    println jvmArgs
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "io/github/kylinhunter/commons/generator/exception/**",
                    "io/github/kylinhunter/commons/generator/*/exception/**",
                    "com/kylinhunter/**"


            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['io.github.kylinhunter.*']
            excludes = ['io.github.kylinhunter.commons.generator.exception.*',
                        'io.github.kylinhunter.commons.generator.*.exception.*']
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.5
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.3
            }
        }
    }
}





