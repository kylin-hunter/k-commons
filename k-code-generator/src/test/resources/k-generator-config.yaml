global: # global config
  template_path: '$user.dir$/templates'   # $user.dir$ is same with:System.getProperty("user.dir")
   #  template_path: 'file://User/bijian/template' # same with: new File('/User/bijian/template');
  output:
    path: '$user.dir$/tmp/generator/src'# $user.dir$ is same with:System.getProperty("user.dir")
    #  output_path: '/Users/bijian/workspace_gitee/k-commons/k-generator/output'
    auto_clean: false # auto clean the output path
    auto_create: true # create the output path if not exists
modules:
  database:
    name: "kp"
    sql_types: # override the default sql type
      "datetime": "java.time.LocalTime"  # column declared datetime, is specially marked as java.time.LocalTime
      "smallint": "java.lang.Short"  # column declared smallint, is specially marked as java.lang.Short
      "(type=='decimal' && size<=19 && precision==0)": "java.lang.Long"
      # column declared decimal(size<=19,precision==0), is marked as java.lang.Longe.g. decimal(10,0) = java.lang.Long
  list:
    - name: 'User'
      context:
        'module_custom_propery': 'module_custom_propery_value'  # a global variable
      table:
        name: "k_junit_code_user"
        skip_columns: # optional , skip some columns
          - 'extend_1'
          - 'extend_2'
          - 'extend_3'
        column_types: # override the default sql type
          "role_id": "java.lang.Integer"  # role_id  is specially marked as type java.lang.Integer
    - name: 'Role'
      table:
        name: 'k_junit_code_role'
templates:
  context:
    'author': 'bijian'  # a global variable
  strategy: # the common strategy for generate the dist file
    template_encoding: UTF-8 # optional
    output_encoding: UTF-8 # optional
  list:
    - name: templates_sample/basic.vm
      enabled: true
      context:
        'basic_vm_custom_property': 'basic_vm_custom_property_value'  # a global variable
      strategy:
        package_name: '"com.kylinhunter."+k.str_lower(module.name)' #required ${module.name} will be replaced by the module's name
        class_name: k.str_camel(module.name,'upper')+'Basic' #required ${module.name} will be replaced by the module's camel name
        super_class: 'io.github.kylinhunter.commons.io.file.FileUtil' # optional
        interfaces:  # optional
          - java.io.Serializable
          - java.lang.Cloneable
        extension: 'java' # optional
    - name:  templates_sample/basic_swagger.vm
      enabled: true
      context:
        'basic_swagger_vm_custom_property': 'basic_swagger_vm_custom_property_value'  # a global variable
      strategy:
        package_name: '"com.kylinhunter."+k.str_lower(module.name)' #required ${module.name} will be replaced by the module's name
        class_name: k.str_camel(module.name,'upper')+'BasicSwagger' #required ${module.name} will be replaced by the module's camel name
        super_class: 'io.github.kylinhunter.commons.io.file.FileUtil' # optional
        interfaces: # optional
          - java.io.Serializable
          - java.lang.Cloneable
        extension: 'java' # optional
    - name:  templates_sample/basic_swagger_snippet.vm
      enabled: true
      context:
        'basic_swagger_snippet_vm_custom_property': 'basic_swagger_snippet_vm_custom_property_value'  # a global variable
      strategy:
        package_name: '"com.kylinhunter."+k.str_lower(module.name)' #required ${module.name} will be replaced by the module's name
        class_name: k.str_camel(module.name,'upper')+'BasicSwaggerSnippet' #required ${module.name} will bereplaced by the module's camel name
        super_class: 'io.github.kylinhunter.commons.io.file.FileUtil' # optional
        interfaces: # optional
          - java.io.Serializable
          - java.lang.Cloneable
        extension: 'java' # optional



