dependencies {
    api(project(":k-clazz"))
    api("commons-io:commons-io")

}


def jarMainlass = "io.github.kylinhunter.commons.clazz.Main"
def jarPremainClass = "io.github.kylinhunter.commons.clazz.agent.PreMain"
def jarAgentClass = "io.github.kylinhunter.commons.clazz.agent.AgentMain"

jar {
    exclude("logback.xml")
    exclude("k-jul-logging.properties")
    manifest {
        attributes(
                'Main-Class': jarMainlass,
                'Premain-Class': jarPremainClass,
                'Agent-Class': jarAgentClass,
                'Can-Redefine-Classes': true,
                'Can-Retransform-Classes': true
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

}


def allJars = (configurations.runtimeClasspath).findAll { it.isFile() }.collect { 'lib/' + it.name }.join(' ')

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs/lib"
}
task originalJar(type: Jar) {

    dependsOn(copyDependencies)
    exclude("logback.xml")
    exclude("k-jul-logging.properties")
    archiveClassifier = 'original'
    manifest {
        attributes(
                'Main-Class': jarMainlass,
                'Premain-Class': jarPremainClass,
                'Agent-Class': jarAgentClass,
                'Can-Redefine-Classes': true,
                'Can-Retransform-Classes': true,
                'Class-Path': allJars + " ."
        )
    }
}
test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    println jvmArgs
}




