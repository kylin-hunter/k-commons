dependencies {
    api project(":k-commons")
// logging
    implementation("ch.qos.logback:logback-classic")
    implementation("org.codehaus.janino:janino")
// commons
    implementation("commons-io:commons-io")
    implementation("commons-codec:commons-codec")
    implementation("org.apache.commons:commons-compress")

//   xml
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    implementation 'com.sun.xml.bind:jaxb-impl'

//   json
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

//   yaml
    implementation('org.yaml:snakeyaml')


}


jar {
    exclude("logback.xml")
    exclude("k-jul-logging.properties")
}
test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')

    println jvmArgs
    jacoco {
        includes = []
        excludes = []
    }
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "io/github/kylinhunter/commons/**/exception/embed/**",
                    "io/github/kylinhunter/commons/**/exception/common/**",
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['io.github.kylinhunter.*']
            excludes = ['io.github.kylinhunter.commons.exception.embed.*',
                        'io.github.kylinhunter.commons.exception.common.*']
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.5
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.3
            }
        }
    }
}