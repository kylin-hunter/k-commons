buildscript {
    apply from: "./script/gradle-script/k-gradle-config.gradle"
    apply from: "./script/gradle-script/k-gradle-version.gradle"


    repositories {
        mavenLocal()

        maven {
            url "https://maven.aliyun.com/repository/public"
        }

        mavenCentral()
    }
    dependencies {
        classpath(app_plugins['spring-boot-gradle-plugin'])
        classpath(app_plugins['gradle-docker-plugin'])
    }

}
plugins {
    id "com.github.spotbugs" version "5.0.14"
    id("com.diffplug.spotless") version "6.18.0"
    id 'jacoco'
}
allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-allprojects.gradle"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    repositories {
        mavenLocal()
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
//        maven {
//            url "https://s01.oss.sonatype.org/content/repositories/snapshots"
//        }
        mavenCentral()
    }

    tasks.withType(Javadoc) {
//      Avoiding Javadoc checks
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

subprojects {


    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'signing'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'jacoco'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-subprojects.gradle"

    group 'io.github.kylin-hunter'
    version "${KYLIN_VERIONS[project.name]}"
    kylinLoadSecretProperties()

    dependencyManagement {
        dependencies {
            for (depJar in rootProject.ext.dependency_management) {
                dependency depJar.value
            }
        }
    }

    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        compileOnly("com.google.code.findbugs:annotations")
        compileOnly("com.google.code.findbugs:jsr305")

        testCompileOnly("com.google.code.findbugs:annotations")
        testCompileOnly("com.google.code.findbugs:jsr305")


        testImplementation("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.platform:junit-platform-suite'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-inline'
        testImplementation 'org.jmockit:jmockit'
    }

    jar {
        archiveClassifier = ''
        manifest.attributes provider: 'gradle'
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    javadoc {
        options {
            encoding = "UTF-8"
            charSet = 'UTF-8'
            author = true
            version = true
            locale = "en_US"
            tags = ["description", "date", "title"]
        }
        failOnError = false

    }
    classes.finalizedBy(kylinTaskChangeActiveProfile)

    test {
        exclude 'io/github/kylinhunter/**/Suite**'
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { true }
            showStandardStreams = true
        }
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

//  https://docs.gradle.org/7.4.2/userguide/jacoco_plugin.html#sec:outgoing_variants
    jacoco {
        toolVersion = "0.8.10"
    }
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            csv.required = false
        }
    }
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {

                limit {
                    counter = 'INSTRUCTION'
                    minimum = 0.6
                }
                limit {
                    counter = 'BRANCH'
                    minimum = 0.4
                }
            }
        }
    }


    publishing {


        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {

                    name = "${KYLIN_MVN_CONFIG.name}"
                    description = "${KYLIN_MVN_CONFIG.description}"
                    url = "${KYLIN_MVN_CONFIG.url}"
                    licenses {
                        license {
                            name = "${KYLIN_MVN_CONFIG.license.name}"
                            url = "${KYLIN_MVN_CONFIG.license.url}"
                        }
                    }
                    developers {
                        developer {
                            name = "${KYLIN_MVN_CONFIG.developer.name}"
                            email = "${KYLIN_MVN_CONFIG.developer.email}"
                        }
                    }
                    scm {
                        url = "${KYLIN_MVN_CONFIG.url}"
                        connection = "${KYLIN_MVN_CONFIG.connection}"
                        developerConnection = "${KYLIN_MVN_CONFIG.developerConnection}"
                    }
                }
            }
        }
        repositories {


            maven {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                if (KYLIN_VERIONS[project.name].endsWith("SNAPSHOT")) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                }

                credentials {

                    println "maven=>${sonatypeUsername} : ${sonatypePassword}"
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }

    }


    signing {
        sign publishing.publications.mavenJava
    }

//    the most important  bug descriptions: https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html
//    https://github.com/spotbugs/spotbugs-gradle-plugin
//    https://spotbugs.github.io/
//    https://spotbugs.readthedocs.io/en/latest/detectors.html?highlight=FindSqlInjection#findsqlinjection
    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        effort = 'max'  // -effort[:min|less|default|more|max]:
        reportLevel = 'medium' // low medium high
        excludeFilter = file("../script/auto-test/spotbugs/exclude.xml")
        onlyAnalyze = ['io.github.kylinhunter.-']
        maxHeapSize = '1g'
        extraArgs = ['-nested:false']
    }

    // Example to configure HTML report
    spotbugsMain {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
    spotbugsTest {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }

// https://github.com/diffplug/spotless/tree/main/plugin-gradle
    spotless {
        java {
            target 'src/main/java/**/*.java'
//            importOrder()
//            removeUnusedImports()
            googleJavaFormat()
            licenseHeaderFile "$rootProject.rootDir/spotless.license-java"
        }
    }


}

wrapper {
    gradleVersion = '7.6'
    archiveBase = 'GRADLE_USER_HOME'
    archivePath = 'wrapper/dists'
    distributionBase = 'GRADLE_USER_HOME"'
    distributionPath = 'wrapper/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-7.6-bin.zip'
}
