buildscript {
    apply from: "./script/gradle-script/k-gradle-config.gradle"
    apply from: "./script/gradle-script/k-gradle-version.gradle"


    repositories {
        mavenLocal()

        maven {
            url "https://maven.aliyun.com/repository/public"
        }

        mavenCentral()
    }
    dependencies {
        classpath(app_plugins['spring-boot-gradle-plugin'])
        classpath(app_plugins['gradle-docker-plugin'])
    }

}
plugins {
    id "com.github.spotbugs" version "5.0.14"
    id("com.diffplug.spotless") version "6.18.0"

    id 'jacoco'
}
allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-allprojects.gradle"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    repositories {
        mavenLocal()
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
//        maven {
//            url "https://s01.oss.sonatype.org/content/repositories/snapshots"
//        }
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'signing'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'jacoco'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-subprojects.gradle"

    group 'io.github.kylin-hunter'
    version "${KYLIN_VERIONS[project.name]}"
    kylinLoadSecretProperties()


    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor 'org.projectlombok:lombok'

        compileOnly("com.google.code.findbugs:annotations:3.0.1u2")
        compileOnly("com.google.code.findbugs:jsr305:3.0.2")

        testCompileOnly("com.google.code.findbugs:annotations:3.0.1u2")
        testCompileOnly("com.google.code.findbugs:jsr305:3.0.2")

        testImplementation("org.projectlombok:lombok")
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.platform:junit-platform-suite'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-inline'


        testImplementation(rootProject.dependency_management['jmockit'])

    }

    jar {
        archiveClassifier = ''
        manifest.attributes provider: 'gradle'
    }

    java {
        withSourcesJar()
        withJavadocJar()

    }

    javadoc {
        options {
            encoding = "UTF-8"
            charSet = 'UTF-8'
            author = true
            version = true
            locale = "en_US"
            tags = ["description", "date", "title"]
        }
        failOnError = false

    }
    classes.finalizedBy(kylinTaskChangeActiveProfile)


    test {
        exclude 'io/github/kylinhunter/**/Suite**'
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { true }
            showStandardStreams = true
        }
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacoco {
        toolVersion = "0.8.10"
//        reportsDirectory = layout.buildDirectory.dir('kylin-reports')
    }
    jacocoTestReport {

        dependsOn test
        reports {
            xml.required = false
            csv.required = true
//            html.outputLocation = layout.buildDirectory.dir('kylin-html-reports')
        }
    }
    jacocoTestCoverageVerification {
        violationRules {
            rule {

                limit {
                    counter = 'INSTRUCTION'
                    minimum = 0.6
                }
                limit {
                    counter = 'BRANCH'
                    minimum = 0.4
                }
            }

            rule {
                enabled = false
                element = 'CLASS'
                includes = ['io.github.kylinhunter.*']
                limit {
                    counter = 'BRANCH'
//                    value = 'TOTALCOUNT'
                    minimum = 0.3
                }
            }
        }
    }


    publishing {


        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
                pom {

                    name = "${KYLIN_MVN_CONFIG.name}"
                    description = "${KYLIN_MVN_CONFIG.description}"
                    url = "${KYLIN_MVN_CONFIG.url}"
                    licenses {
                        license {
                            name = "${KYLIN_MVN_CONFIG.license.name}"
                            url = "${KYLIN_MVN_CONFIG.license.url}"
                        }
                    }
                    developers {
                        developer {
                            name = "${KYLIN_MVN_CONFIG.developer.name}"
                            email = "${KYLIN_MVN_CONFIG.developer.email}"
                        }
                    }
                    scm {
                        url = "${KYLIN_MVN_CONFIG.url}"
                        connection = "${KYLIN_MVN_CONFIG.connection}"
                        developerConnection = "${KYLIN_MVN_CONFIG.developerConnection}"
                    }
                }
            }
        }
        repositories {


            maven {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                if (KYLIN_VERIONS[project.name].endsWith("SNAPSHOT")) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                }

                credentials {

                    println "maven=>${sonatypeUsername} : ${sonatypePassword}"
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }

    }


    signing {
        sign publishing.publications.mavenJava
    }

//https://github.com/spotbugs/spotbugs-gradle-plugin
    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        effort = 'max'  // -effort[:min|less|default|more|max]:
        reportLevel = 'medium' // low medium high
//        visitors = ['FindSqlInjection', 'SwitchFallthrough']
//        omitVisitors = ['MutableStaticFields','FindReturnRef']
//        reportsDir = file("$buildDir/spotbugs")
//        includeFilter = file("include.xml")
        excludeFilter = file("../auto-test/spotbugs/exclude.xml")
//        baselineFile = file("baseline.xml")
        onlyAnalyze = ['io.github.kylinhunter.-']
        maxHeapSize = '1g'
        extraArgs = ['-nested:false']
//        This option enables or disables scanning of nested jar and zip files found in the list of files and directories to be analyzed.
//        jvmArgs = ['-Duser.language=zh']
    }

    // Example to configure HTML report
    spotbugsMain {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
    spotbugsTest {
        reports {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }


    spotless {
        java {
//            target 'src/*/java/**/AbstractFieldConvertor.java'

            // Use the default importOrder configuration
            importOrder()
            // optional: you can specify import groups directly
            // note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
//            importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
            // optional: instead of specifying import groups directly you can specify a config file
            // export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
//            importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

            removeUnusedImports()

            // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
//            cleanthat()          // has its own section below

            // Choose one of these formatters.
            googleJavaFormat()   // has its own section below
//            eclipse()            // has its own section below
//            prettier()           // has its own section below
//            clangFormat()        // has its own section below

//            formatAnnotations()  // fixes formatting of type annotations, see below

//            licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
        }
    }


}

wrapper {
    gradleVersion = '7.6'
    archiveBase = 'GRADLE_USER_HOME'
    archivePath = 'wrapper/dists'
    distributionBase = 'GRADLE_USER_HOME"'
    distributionPath = 'wrapper/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-7.6-bin.zip'
}
